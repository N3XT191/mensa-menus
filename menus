#!/usr/bin/env python3
import urllib.request, json 
from xml.etree.ElementTree import parse, fromstring
import sys
import datetime
#--------------------------------------------------------------------#
# set to 'student', 'staff' or 'extern'
#--------------------------------------------------------------------#
prices = 'student'
#--------------------------------------------------------------------#
# customize blocked menus here by adding menu names to blocked_menus #
#--------------------------------------------------------------------#
blocked_menus = ['Insalata', 'Garden', 'GARDEN', 'natÃ¼rlich vegi', 'GARDEN ABEND', 'food market vegi', 'Salad Pot', 'Small Salad Pot', 'WOK GREEN']
#---------------------------------------------------------------------------------#
# customize groups by modifying the dict below. As a reference, use following ids:#
# Clausiusbar:                  4
# Dozentenfoyer                 6
# Foodtrailer ETZ:              9
# G-ESSbar:                     11
# Mensa Polyterrasse:           12
# Polysnack:                    13
# Tannenbar:                    14
# Alumni quattro Lounge:        15
# food market - pizza pasta:    18
# food market - green day:      19
# food market - grill bbQ       20
# FUSION meal                   21
# FUSION coffee:                22
# BELLAVISTA:                   25
# food&lab:                     28
#
# for uzh Mensa use 'uzh'
#---------------------------------------------------------------------------------#
locations = {
    'zentrum': [12, 'uzh', 13, 4, 11, 28],
    'hoengg': [15,18,19,20,21,25],
    'clausius': [4],
    'dozentenfoyer': [6],
    'gessbar': [11],
    'poly': [12],
    'polysnack': [13],
    'alumni': [15],
    'pizza': [18],
    'grill': [20],
    'fusion': [21],
    'grill': [20],
    'bellavista': [25],
    'foodlab': [28],
    'uzh': ['uzh'],
}

#--------------------------------------------------------------------#
# DO NOT MODIFY CODE BELOW                                           #
#--------------------------------------------------------------------#

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def usage():
    print('usage: "menus ' + bcolors.BOLD + 'location' + bcolors.ENDC + ' [--all]"')
    print("with possible locations:")
    for location in locations.keys():
        print("\t", location)
    print("")
    print('add "--all" to ignore blocked menus')
    sys.exit()

today = datetime.date.today().strftime("%Y-%m-%d")
hour = datetime.datetime.now().hour
weekday = datetime.date.today().weekday()

if(hour >= 21):
    today = (datetime.date.today() + datetime.timedelta(days=1) ).strftime("%Y-%m-%d")
    weekday += 1

weekday += 1

if(hour >=14 and hour <=20):
    meal_time = 'dinner'
    uzh_id = '149'
else:
    meal_time = 'lunch'
    uzh_id = '148'

eth_url = 'https://www.webservices.ethz.ch/gastro/v1/RVRI/Q1E1/meals/de/'+today+'/' + meal_time
uzh_url = 'http://zfv.ch/de/menus/rssMenuPlan?menuId=' + uzh_id + '&dayOfWeek=' + str(weekday)


def print_uzh_menus():
    with urllib.request.urlopen(uzh_url) as url:
        string = url.read().decode()
        string= string.replace('<br />', '') # fix malformed tags
        document= fromstring(string) # parse the string

        i = 0
        mensa_name = 'UZH Mensa'
        if(meal_time == 'dinner'):
            mensa_name += ' Dinner'
        print(bcolors.OKGREEN, bcolors.BOLD, mensa_name, bcolors.ENDC)
        for child in document[4][3][0]:
            if(i%2 == 0):
                title = child.text
                price = child[0].text

                cleanTitle = " ".join(title.split())
                cleanPrice = " ".join(price.split())[2:10]
                print(bcolors.OKBLUE, bcolors.BOLD, cleanTitle, cleanPrice, bcolors.ENDC)
            else:
                description = child.text
                cleanDescription = " ".join(description.split())
                print("    ",cleanDescription)
            i += 1
    print()

if len(sys.argv) != 2 and len(sys.argv) != 3:
    usage()
if(list(filter(lambda location: location == sys.argv[1], locations))):
    with urllib.request.urlopen(eth_url) as url:
        data = json.loads(url.read().decode())

        for mensa in locations[sys.argv[1]]:
            if(mensa == 'uzh'):
                print_uzh_menus()
            else:
                potential_mensa = list(filter(lambda menu: menu['id'] == mensa, data))

                if potential_mensa:
                    mensa = potential_mensa[0]
                    menus = mensa['meals']

                    print(bcolors.OKGREEN, bcolors.BOLD, mensa['mensa'], bcolors.ENDC)
                    for menu in menus:
                        if menu['label'] not in blocked_menus or (len(sys.argv) == 3 and sys.argv[2] == "--all"):
                            menu_price = menu['prices'][prices]
                            print(bcolors.OKBLUE, bcolors.BOLD, menu['label'] + " | CHF " , menu_price , bcolors.ENDC)
                            
                            description = " ".join(menu['description'])
                            # remove multiple spaces
                            description = " ".join(description.split())
                            print("    ",description)
                    print()
                else:
                    print(bcolors.FAIL, "You either added an invalid mensa-id or this mensa doesn't serve dinner", bcolors.ENDC)
else:
    usage()
